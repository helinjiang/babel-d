{"version":3,"sources":["../src/babel-compile.js"],"names":["compile","compileFile","compileByBabel","getFiles","fs","require","path","fse","fileUtil","babel","allowFileExt","compiledMtime","compiledErrorFiles","srcPath","outPath","files","changedFiles","console","log","forEach","srcFullPath","join","file","saveOutFullPathpath","extname","indexOf","mTime","statSync","mtime","getTime","isFile","outmTime","ret","push","index","splice","saveOutFullPath","onlyCopy","content","readFileSync","copySync","startTime","Date","now","data","filename","endTime","outputFileSync","code","e","error","options","transform","presets","plugins","paths","result","getAllFiles","map","item","relativePath"],"mappings":"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","file":"babel-compile.js","sourcesContent":["const fs = require('fs');\r\nconst path = require('path');\r\nconst fse = require('fs-extra');\r\nconst fileUtil = require('./file');\r\n\r\n//babel not export default property\r\n//so can not use `import babel from 'babel-core'`\r\nconst babel = require('babel-core');\r\n\r\nlet allowFileExt = ['.js'];\r\n\r\n/**\r\n * store compiled files last mtime\r\n * @type {Object}\r\n */\r\nlet compiledMtime = {};\r\n\r\n/**\r\n * compiled error files\r\n * @type {Array}\r\n */\r\nlet compiledErrorFiles = [];\r\n\r\n/**\r\n * compile files\r\n * @return {} []\r\n */\r\nexport function compile(srcPath, outPath) {\r\n  let files = getFiles(srcPath, true);\r\n\r\n  let changedFiles = [];\r\n\r\n  console.log(files);\r\n\r\n  files.forEach(file => {\r\n    let srcFullPath = path.join(srcPath, file);\r\n    let saveOutFullPathpath = path.join(outPath, file);\r\n\r\n    let extname = path.extname(file);\r\n\r\n    //if is not js file, only copy\r\n    if (allowFileExt.indexOf(extname) === -1) {\r\n      compileFile(srcFullPath, saveOutFullPathpath, true);\r\n      return;\r\n    }\r\n\r\n    let mTime = fs.statSync(srcFullPath).mtime.getTime();\r\n\r\n    if (fileUtil.isFile(saveOutFullPathpath)) {\r\n      let outmTime = fs.statSync(saveOutFullPathpath).mtime.getTime();\r\n\r\n      // if compiled file mtime is later than source file,\r\n      // it means source file not modified, so there is no necessary to compile.\r\n      if (outmTime >= mTime) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (!compiledMtime[file] || mTime > compiledMtime[file]) {\r\n      let ret = compileFile(srcFullPath, saveOutFullPathpath);\r\n\r\n      if (ret) {\r\n        changedFiles.push(saveOutFullPathpath);\r\n      }\r\n\r\n      compiledMtime[file] = mTime;\r\n\r\n      let index = compiledErrorFiles.indexOf(file);\r\n\r\n      if (ret) {\r\n        if (index > -1) {\r\n          compiledErrorFiles.splice(index, 1);\r\n        }\r\n      } else if (ret === false) {\r\n        if (index === -1) {\r\n          compiledErrorFiles.push(file);\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  // console.error(compiledErrorFiles)\r\n}\r\n\r\n/**\r\n * compile single file\r\n * @param  {String} file     []\r\n * @param  {Boolean} [onlyCopy] []\r\n * @return {}          []\r\n */\r\nexport function compileFile(srcFullPath, saveOutFullPath, onlyCopy) {\r\n  let content = fs.readFileSync(srcFullPath, 'utf8');\r\n\r\n  //when get file content empty, maybe file is locked\r\n  if (!content) {\r\n    return;\r\n  }\r\n\r\n  // only copy file content\r\n  if (onlyCopy) {\r\n    fse.copySync(srcFullPath, saveOutFullPath);\r\n    return;\r\n  }\r\n\r\n  try {\r\n    let startTime = Date.now();\r\n\r\n    let data = compileByBabel(content, {\r\n      filename: srcFullPath\r\n      // sourceMaps: true,\r\n      // sourceFileName: relativePath\r\n    });\r\n\r\n    let endTime = Date.now();\r\n    console.log(`Compile file ${srcFullPath}`, `Babel cost ${endTime - startTime}`);\r\n\r\n    // save file\r\n    fse.outputFileSync(saveOutFullPath, data.code);\r\n\r\n    return true;\r\n  } catch (e) {\r\n    console.error(`compile file ${srcFullPath} error`, e);\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * babel compile\r\n * https://babeljs.io/docs/core-packages/#babeltransformcode-string-options-object\r\n * @return {} []\r\n */\r\nexport function compileByBabel(content, options) {\r\n  return babel.transform(content, Object.assign({\r\n    presets: ['es2015-loose', 'stage-1'],\r\n    plugins: ['transform-runtime']\r\n  }, options));\r\n}\r\n\r\n/**\r\n * get all files\r\n * @param paths\r\n */\r\nexport function getFiles(paths) {\r\n  let result = fileUtil.getAllFiles(paths);\r\n\r\n  let files = result.map((item) => {\r\n    return item.relativePath;\r\n    // return path.join(item.basePath, item.relativePath);\r\n  });\r\n\r\n  return files;\r\n}\r\n"]}