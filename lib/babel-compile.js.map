{"version":3,"sources":["../src/babel-compile.js"],"names":["compile","fs","require","path","fse","fileUtil","allowFileExt","compiledMtime","compiledErrorFiles","srcPath","outPath","files","getFiles","changedFiles","console","log","forEach","srcFullPath","join","file","saveOutFullPathpath","extname","indexOf","compileFile","mTime","statSync","mtime","getTime","isFile","outmTime","ret","push","index","splice","saveOutFullPath","onlyCopy","content","readFileSync","copySync","compileByBabel","e","error","startTime","Date","now","babel","data","transform","filename","presets","plugins","outputFileSync","code","paths","result","getAllFiles","map","item","relativePath"],"mappings":"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","file":"babel-compile.js","sourcesContent":["const fs = require('fs');\r\nconst path = require('path');\r\nconst fse = require('fs-extra');\r\nconst fileUtil = require('./file');\r\n\r\nlet allowFileExt = ['.js'];\r\n\r\n/**\r\n * store compiled files last mtime\r\n * @type {Object}\r\n */\r\nlet compiledMtime = {};\r\n\r\n/**\r\n * compiled error files\r\n * @type {Array}\r\n */\r\nlet compiledErrorFiles = [];\r\n\r\n/**\r\n * compile\r\n * @return {} []\r\n */\r\nexport function compile(srcPath, outPath) {\r\n    let files = getFiles(srcPath, true);\r\n\r\n    let changedFiles = [];\r\n\r\n    console.log(files);\r\n\r\n    files.forEach(file => {\r\n        let srcFullPath = path.join(srcPath, file);\r\n        let saveOutFullPathpath = path.join(outPath, file);\r\n\r\n        let extname = path.extname(file);\r\n\r\n        //if is not js file, only copy\r\n        if (allowFileExt.indexOf(extname) === -1) {\r\n            compileFile(srcFullPath, saveOutFullPathpath, true);\r\n            return;\r\n        }\r\n\r\n        let mTime = fs.statSync(srcFullPath).mtime.getTime();\r\n\r\n        if (fileUtil.isFile(saveOutFullPathpath)) {\r\n            let outmTime = fs.statSync(saveOutFullPathpath).mtime.getTime();\r\n\r\n            // if compiled file mtime is later than source file,\r\n            // it means source file not modified, so there is no necessary to compile.\r\n            if (outmTime >= mTime) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (!compiledMtime[file] || mTime > compiledMtime[file]) {\r\n            let ret = compileFile(srcFullPath, saveOutFullPathpath);\r\n\r\n            if (ret) {\r\n                changedFiles.push(saveOutFullPathpath);\r\n            }\r\n\r\n            compiledMtime[file] = mTime;\r\n\r\n            let index = compiledErrorFiles.indexOf(file);\r\n\r\n            if (ret) {\r\n                if (index > -1) {\r\n                    compiledErrorFiles.splice(index, 1);\r\n                }\r\n            } else if (ret === false) {\r\n                if (index === -1) {\r\n                    compiledErrorFiles.push(file);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    // console.error(compiledErrorFiles)\r\n}\r\n\r\n/**\r\n * compile single file\r\n * @param  {String} file     []\r\n * @param  {Boolean} [onlyCopy] []\r\n * @return {}          []\r\n */\r\nfunction compileFile(srcFullPath, saveOutFullPath, onlyCopy) {\r\n    let content = fs.readFileSync(srcFullPath, 'utf8');\r\n\r\n    //when get file content empty, maybe file is locked\r\n    if (!content) {\r\n        return;\r\n    }\r\n\r\n    // only copy file content\r\n    if (onlyCopy) {\r\n        fse.copySync(srcFullPath, saveOutFullPath);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        compileByBabel(content, srcFullPath, saveOutFullPath);\r\n        return true;\r\n    } catch (e) {\r\n        console.error(`compile file ${srcFullPath} error`, e);\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * babel compile\r\n * @return {} []\r\n */\r\nfunction compileByBabel(content, srcFullPath, saveOutFullPath) {\r\n    let startTime = Date.now();\r\n\r\n    //babel not export default property\r\n    //so can not use `import babel from 'babel-core'`\r\n    let babel = require('babel-core');\r\n    let data = babel.transform(content, {\r\n        filename: srcFullPath,\r\n        presets: ['es2015-loose', 'stage-1'],\r\n        plugins: ['transform-runtime'],\r\n        // sourceMaps: true,\r\n        // sourceFileName: relativePath\r\n    });\r\n\r\n    console.log(`Compile file ${srcFullPath}`, 'Babel', startTime);\r\n\r\n    fse.outputFileSync(saveOutFullPath, data.code);\r\n}\r\n\r\nfunction getFiles(paths) {\r\n    let files = [];\r\n\r\n    let result = fileUtil.getAllFiles(paths);\r\n\r\n    files = result.map((item) => {\r\n        return item.relativePath;\r\n        // return path.join(item.basePath, item.relativePath);\r\n    });\r\n\r\n    return files;\r\n}\r\n"]}